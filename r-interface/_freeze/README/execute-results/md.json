{
  "hash": "9629af67199513e45263219d8338c33e",
  "result": {
    "markdown": "---\nformat: gfm\ntoc: false\n---\n\n\n<!-- README.md is generated from README.qmd. Please edit that file -->\n\n\n\n\n\n# Setup instructions for using GUDHI from R\n\n<!-- badges: start -->\n\n<!-- badges: end -->\n\n## The [**reticulate**](https://rstudio.github.io/reticulate/) package\n\nThe [**reticulate**](https://rstudio.github.io/reticulate/) package\nprovides a comprehensive set of tools for interoperability between\nPython and R. The package includes facilities for:\n\n-   Calling Python from R in a variety of ways including R Markdown,\n    sourcing Python scripts, importing Python modules, and using Python\n    interactively within an R session.\n-   Translation between R and Python objects (for example, between R and\n    Pandas data frames, or between R matrices and NumPy arrays).\n-   Flexible binding to different versions of Python including virtual\n    environments and Conda environments.\n\n[**reticulate**](https://rstudio.github.io/reticulate/) embeds a Python\nsession within your R session, enabling seamless, high-performance\ninteroperability. If you are an R developer that uses Python for some of\nyour work or a member of data science team that uses both languages,\n[**reticulate**](https://rstudio.github.io/reticulate/) can dramatically\nstreamline your workflow.\n\n## Bring GUDHI into R\n\n-   First, you'll want to install and load the\n    [**reticulate**](https://rstudio.github.io/reticulate/) package into\n    your session:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # install.packages(\"reticulate\")\n    library(reticulate)\n    ```\n    :::\n\n\n-   Next, the fastest way to get you set up to use Python from R with\n    [**reticulate**](https://rstudio.github.io/reticulate/) is to use\n    the `install_miniconda()` utility function which is included in the\n    [**reticulate**](https://rstudio.github.io/reticulate/) package. In\n    details, use something like:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    install_miniconda()\n    ```\n    :::\n\n\n-   Next, it is recommended that you create a virtual conda environment\n    in which you'll install all required Python packages. This can be\n    achieved using the `reticulate::conda_create()` function as follows:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    version <- \"3.9.6\"\n    conda_create(\"r-reticulate\", python_version = version)\n    ```\n    :::\n\n\n-   Next, you can seamlessly install all the Python packages you need by\n    calling the `conda_install()` function. For instance, to use Gudhi,\n    you would do something like:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conda_install(\"scikit-learn\", envname = \"r-reticulate\")\n    conda_install(\"gudhi\", envname = \"r-reticulate\")\n    ```\n    :::\n\n\nThis is a setup that you ought to do only once (unless you want to\nchange your Python version for some reason).\n\nIf you want to check your Python configuration, you can do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_config()\n#> python:         /Users/stamm-a/Library/r-miniconda/envs/r-reticulate/bin/python3.9\n#> libpython:      /Users/stamm-a/Library/r-miniconda/envs/r-reticulate/lib/libpython3.9.dylib\n#> pythonhome:     /Users/stamm-a/Library/r-miniconda/envs/r-reticulate:/Users/stamm-a/Library/r-miniconda/envs/r-reticulate\n#> version:        3.9.6 | packaged by conda-forge | (default, Jul 11 2021, 03:36:15)  [Clang 11.1.0 ]\n#> numpy:          /Users/stamm-a/Library/r-miniconda/envs/r-reticulate/lib/python3.9/site-packages/numpy\n#> numpy_version:  1.22.4\n#> \n#> NOTE: Python version was forced by RETICULATE_PYTHON\n```\n:::\n\n\n# Organisation\n\n## File hierarchy\n\nThis folder contains a number of [Quarto](https://quarto.org) documents\ncontributed with the purpose of showing how\n[`R`](https://www.r-project.org) can be used to enhance statistical\nanalysis of topological data produced via\n[Gudhi](https://gudhi.inria.fr). Each tutorial is hosted in its own\nfolder which is organised as follows:\n\n-   The Quarto document with extension `.qmd` which is the main file\n    that a developer is supposed to contribute. In this document, there\n    is a YAML header in which the contributor can specify various output\n    formats by adding\n\n    ``` yaml\n    #| eval: false\n    format:\n      html: default\n      gfm: default\n      pdf: default\n    ```\n\n    The complete list of possible output formats:\n    <https://quarto.org/docs/output-formats/all-formats.html>.\n\n-   A Github-flavored markdown (GMF) document with extension `.md` which\n    enables nice visualization of the notebook directly in the Github\n    web interface.\n\n-   A folder containing useful libs and resources to display the GMF\n    document.\n\n## Contributing\n\nIf you want to contribute, you should\n\n1.  Fork the `TDA-tutorials` repo\n2.  Open the RStudio project in\n    `TDA-tutorials/r-interface/r-interface.Rproj`.\n3.  When opened in RStudio, the working directory should now be\n    `TDA-tutorials/r-interface/` in which you can now create a folder\n    with evocative name to put the Quarto document describing the\n    analysis you want to share.\n    -   Note: you can use the same YAML header as in\n        `reticulate/reticulate.qmd` as a number of presets for rendering\n        are made into the `_quarto.yml` file.\n",
    "supporting": [
      "README_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}